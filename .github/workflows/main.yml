name: Auto merge PR and create tag
on:
  pull_request_review:
    types:
      - submitted
    branches:
      - master
      - workflow

jobs:
  approved:
    if: github.event.review.state == 'approved' && github.event.review.user.login =='mangeshbangale21'
    runs-on: ubuntu-latest
    steps:
      - name: get PR title and number
        id: data
        run: |
          echo "data is ${{ toJson(github.event.review.user) }} " 
          r=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" | jq '[.[] | select(.state == "APPROVED")]' | jq length)
          echo "$r"
          echo "${{ github.event.pull_request.requested_reviewers }}"
          echo "This PR was approved"
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "GIT_TOKEN=${{ secrets.GIT_TOKEN }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v2


      - name: verify if presious tag and new release tag already present
        id: get_tag
        run: |
          cat RELEASE.md
          PREVSIOUS_RELEASE_TAG=$(cat RELEASE.md | grep -oP -m 2 'v\d+\.\d+\.\d+' | tail -n 1)
          CURRENT_RELEASE_TAG=$(cat RELEASE.md | grep -oP 'v\d+\.\d+\.\d+' | head -n 1)
          echo "PREVSIOUS_RELEASE_TAG is : $PREVSIOUS_RELEASE_TAG"
          echo "CURRENT_RELEASE_TAG is: $CURRENT_RELEASE_TAG"
          if [[ "$PREVSIOUS_RELEASE_TAG" == "" || "$CURRENT_RELEASE_TAG" == "" ]]; then
            echo "Could not read tag from RELEASE.md"
            exit 1
          elif [[ "$PREVSIOUS_RELEASE_TAG" == "$CURRENT_RELEASE_TAG"  ]]; then
            echo "current tag and previuos tag version is same"
            exit 1
          fi

          response_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$PREVSIOUS_RELEASE_TAG)
          if [[ ! "$response_code" == "200" ]]; then
            echo "Tag $PREVSIOUS_RELEASE_TAG is not exists in ${{ github.repository }} repo."
            exit 1
          fi
          response_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$CURRENT_RELEASE_TAG)
          if [[ "$response_code" == "200" ]]; then
              echo "current tag $CURRENT_RELEASE_TAG is already exists in ${{ github.repository }} repo."
              ls .github/workflows/
              chmod u+x remove_review.sh
              ./remove_review.sh ${{ steps.data.outputs.GIT_TOKEN }} ${{ github.repository }} ${{ steps.data.outputs.PR_NUMBER }} "current tag $CURRENT_RELEASE_TAG is already exists in ${{ github.repository }} repo."
              exit 1
          fi
          echo "TAG_NAME=$CURRENT_RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Merge Pull Request and create tag
        id: pr_merge
        if: success()
        run: |
          echo "Pull request number is : ${{ steps.data.outputs.PR_NUMBER }} "
          response=$(curl -L \
          -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.data.outputs.GIT_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.data.outputs.PR_NUMBER }}/merge \
          -d '{"commit_title":"Expand enum","commit_message":"Add a new value to the merge_method enum","merge_method":"merge"}')
          sha=$(echo $response | grep -o '"sha": "[a-f0-9]\{40\}"' | grep -o '[a-f0-9]\{40\}')
          echo "commit_sha=$sha" >> $GITHUB_OUTPUT

      - name: create tag
        id: tag
        if: success()
        run: |
          curl -X POST -H "Authorization: token ${{ steps.data.outputs.GIT_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/git/refs \
          -d '{
          "ref": "refs/tags/${{ steps.get_tag.outputs.TAG_NAME }}",
          "sha": "${{ steps.pr_merge.outputs.commit_sha }}"
          }'

      - name: Create Release
        id: create-release
        if: success()
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.data.outputs.GIT_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ steps.get_tag.outputs.TAG_NAME }}","target_commithash":"${{ steps.pr_merge.outputs.commit_sha }}","name":"test-reease ${{ steps.get_tag.outputs.TAG_NAME }}","body":"Description of the release","draft":false,"prerelease":false,"generate_release_notes":true}'


